原理如下（假设序列共有n个元素）：

将序列每相邻两个数字进行归并操作，形成n/2个序列，排序后每个序列包含两/一个元素
若此时序列数不是1个则将上述序列再次归并，形成n/4个序列，每个序列包含四/三个元素
重复步骤2，直到所有元素排序完毕，即序列数为1

def merge_sort( nums):
    if not nums or len(nums) == 0:
        return None
    if len(nums) == 1:
        return nums
    mid = len(nums) // 2
    left = merge_sort(nums[:mid])
    right = merge_sort(nums[mid:])
    return merge(left, right)

def merge(left, right):
    result = []
    while left and right:
        if left[0] <= right[0]:
            result.append(left.pop(0))
        else:
            result.append(right.pop(0))
    if left:
        result = result + left
    if right:
        result = result + right
    return result

############################
非递归

    def merge2(self, nums, low, mid, high):
        result = []
        left = nums[low:mid]
        right = nums[mid:high]
        while left and right:
            if left[0] <= right[0]:
                result.append(left.pop(0))
            else:
                result.append(right.pop(0))
        if left:
            result = result + left
        if right:
            result = result + right
        nums[low:high] = result


    def merge_sort2(self, nums):
        length = len(nums)
        i = 1 #步长
        while i < length:
            low = 0
            while low < length:
                mid = low + i
                high = min(low + 2*i, length)
                if mid < high:
                    self.merge2(nums, low, mid, high)
                low += 2*i
            i = 2*i
        return nums
